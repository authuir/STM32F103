/* Standard includes. */
#include <stdio.h>

/* Scheduler includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"

/* Library includes. */
#include "stm32f10x_it.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_tim.h"


static void prvSetupHardware( void );

static void vLED1( void *pvParameters );

static void vLED2( void *pvParameters );


int main( void )
{

	prvSetupHardware();

	xTaskCreate( vLED1, "LED1 Shrink", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL );
	
	xTaskCreate( vLED2, "LED2 Shrink", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL );

	vTaskStartScheduler();

	return 0;
}

static void vLED1( void *pvParameters )
{
	while(1)
	{	
		GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
		vTaskDelay( 100/portTICK_RATE_MS );  
		GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_RESET);
		vTaskDelay( 100/portTICK_RATE_MS );
	}
}

static void vLED2( void *pvParameters )
{
	while(1)
	{	
		GPIO_WriteBit(GPIOB,GPIO_Pin_0,Bit_SET);
		vTaskDelay( 200/portTICK_RATE_MS );  
		GPIO_WriteBit(GPIOB,GPIO_Pin_0,Bit_RESET);
		vTaskDelay( 300/portTICK_RATE_MS );
	}
}

static void prvSetupHardware( void )
{
	GPIO_InitTypeDef  GPIO_InitStructure;  
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE );
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 						//????
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 ;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 ;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}
